ex4 test case for sigmoidGradient()

sigmoidGradient([[-1 -2 -3] ; magic(3)])
ans =
  1.9661e-001  1.0499e-001  4.5177e-002
  3.3524e-004  1.9661e-001  2.4665e-003
  4.5177e-002  6.6481e-003  9.1022e-004
  1.7663e-002  1.2338e-004  1.0499e-001
Note: This thread is closed to comments. if you have a question, post it in the Week 5 discussion forum area.

============

keywords: test case sigmoidgradient

3 Replies
Joe Ellis avatar
Joe Ellis
6 years ago

My results are right (I think) but I'm not getting the exponent notation:

12345678
>> sigmoidGradient([[-1 -2 -3] ; magic(3)])

ans =

    0.1966    0.1050    0.0452
    0.0003    0.1966    0.0025
    0.0452    0.0066    0.0009
    0.0177    0.0001    0.1050
Did you intentionally setup MATLAB to give results using exponents (and, if so, may I ask why)?

Tom Mosher avatar
Tom Mosher
Mentor
6 years ago

The appearance of the values on your screen is based on MATLAB or Octave's whim. The screen display appearance has no impact on the double-precision values stored internal the program - just how they are shown on your screen.

You can change the display format using the "format" command. Use "help format" to learn what options are available.

SV
Satyam Verma
6 years ago

How to decide where to use .* or * in multiplying two matrices?

Tom Mosher avatar
Tom Mosher
Mentor
6 years ago

If the result has the same size as both operands, and you don't want to automatically calculate the sum of the products, use element-wise multiplication.

SV
Satyam Verma
6 years ago

Thanks..

r
rydenisbak
6 years ago

Hello, I have trable. 

qwe = [[-1 -2 -3] ; magic(3)];

>> qwe .* ( 1 - qwe )

ans =

    -2    -6   -12

   -56     0   -30

    -6   -20   -42

   -12   -72    -2

Tom Mosher avatar
Tom Mosher
Mentor
6 years ago

The probem is that you didn't include the sigmoid - so the short form of the sigmoid gradient doesn't work.

If g = sigmoid(z),

then g' = g .* (1-g)

You forgot to compute g.

r
rydenisbak
6 years ago

Exactly! Thank you.

sg
shreya gupta
6 years ago

sir i am facing the same problem and even after including the equation (given in sigmoid.m)  to compute g, i am getting the same result. Please help. 

Tom Mosher avatar
Tom Mosher
Mentor
6 years ago

Sorry, what "same result" do you mean? Need more details.

sg
shreya gupta
6 years ago

my results for:

qwe = [[-1 -2 -3] ; magic(3)];

>> qwe .* ( 1 - qwe )

ans =

-2 -6 -12

-56 0 -30

-6 -20 -42

-12 -72 -2

sg
shreya gupta
6 years ago

i am facing this problem even after including the equation to compute g apart from equationg g to sigmoid(z) and finding gradient of g as you've mentioned in the comments above

Tom Mosher avatar
Tom Mosher
Mentor
6 years ago

Start from here:

12345678
>> u = sigmoid([[-1 -2 -3] ; magic(3)])
% result
u =
   0.268941   0.119203   0.047426
   0.999665   0.731059   0.997527
   0.952574   0.993307   0.999089
   0.982014   0.999877   0.880797

...then you arrive here:

12345678
>> u.*(1-u)
% result
ans =
  1.9661e-001  1.0499e-001  4.5177e-002
  3.3524e-004  1.9661e-001  2.4665e-003
  4.5177e-002  6.6481e-003  9.1022e-004
  1.7663e-002  1.2338e-004  1.0499e-001

==========++++++++++==========

Test cases for ex4 nnCostFunction()

Here is a test case for the nnCostFunction() with (and without) regularization:

Enter these values in your console workspace, compare your results with those given.

Test Case with regularization:

12345678
il = 2;              % input layer
hl = 2;              % hidden layer
nl = 4;              % number of labels
nn = [ 1:18 ] / 10;  % nn_params
X = cos([1 2 ; 3 4 ; 5 6]);
y = [4; 2; 3];
lambda = 4;
[J grad] = nnCostFunction(nn, il, hl, nl, X, y, lambda)
output:

1234567891011121314151617181920
J = 19.474
grad =
0.76614
0.97990
0.37246
0.49749
0.64174
0.74614
0.88342
0.56876

Here are the values for all internal variables for the regularized test case:

12345678910111213141516171819202122232425262728293031323334353637383940
d2 =
   0.79393   1.05281
   0.73674   0.95128
   0.76775   0.93560

d3 =
   0.888659   0.907427   0.923305  -0.063351
   0.838178  -0.139718   0.879800   0.896918
   0.923414   0.938578  -0.049102   0.960851


------------------------------------------------------------------------------------------------

Test case without regularization (uses same data, but 0 for lambda):

12345678910111213141516171819202122
>> [J grad] = nnCostFunction(nn, il, hl, nl, X, y, 0)
J =  7.4070
grad =
   0.766138
   0.979897
  -0.027540
  -0.035844
  -0.024929
  -0.053862
   0.883417

============

Values for Delta1 and Delta2 (the unregularized gradient, from tutorial Step 5 and Step 6) - truncated to 3 decimal places, prior to scaling by 1/m.

1234567891011
Delta1 = 
  2.298 -0.082 -0.074
  2.939 -0.107 -0.161

Delta2 =
  2.650  1.377  1.435
  1.706  1.033  1.106
  1.754  0.768  0.779
  1.794  0.935  0.966


1 Reply
Tom Mosher avatar
Tom Mosher
Mentor
5 years ago

Results for unregulated test case:

123456789101112131415161718192021222324252627282930
a2 =
   1.00000   0.51350   0.54151
   1.00000   0.37196   0.35705
   1.00000   0.66042   0.70880

a3 =
   0.88866   0.90743   0.92330   0.93665
   0.83818   0.86028   0.87980   0.89692
   0.92341   0.93858   0.95090   0.96085

